{"version":3,"sources":["ng-paste-from.coffee","ng-paste-from.js"],"names":["angular","module","constant","invalidColumnLength","failedValidation","row","column","directive","restrict","scope","ngPasteFrom","ngPasteFromColumns","ngPasteFromRowSeparator","ngPasteFromColumnSeparator","ngPasteFromPasteOnly","ngPasteFromBeforeParse","ngPasteFromAfterParseRow","ngPasteFromOnValidate","ngPasteFromBeforeApply","ngPasteFromOnError","link","$scope","element","console","error","pasteEvent","event","data","ref","clipboardData","getData","originalEvent","window","processPasteData","preventDefault","changeEvent","val","on","controller","$filter","ngPasteFromErrors","ngPasteFromSeparators","columnsToObject","columns","format","i","index","len","obj","length","getExpectedColumnsLength","expectedColumnsLength","ref1","result","rowData","rowResult","rows","split","source","expectedLength","actualLength","push","$apply","call","this"],"mappings":"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","file":"ng-paste-from-latest.min.js","sourcesContent":["angular.module \"ngPasteFrom\", []\n\t.constant \"ngPasteFromErrors\",\n\t\tinvalidColumnLength: \"NGPASTEFROM_INVALID_COLUMN_LENGTH\"\n\t\tfailedValidation: \"NGPASTEFROM_FAILED_VALIDATION\"\n\n\t.constant \"ngPasteFromSeparators\",\n\t\trow: /\\r\\n|\\n\\r|\\n|\\r/g\n\t\tcolumn: \"\\t\"\n\n\t.directive \"ngPasteFrom\", ->\n\t\trestrict: \"A\"\n\t\tscope: \n\t\t\tngPasteFrom: \"=\"\n\t\t\tngPasteFromColumns: \"=\"\n\t\t\tngPasteFromRowSeparator: \"=\"\n\t\t\tngPasteFromColumnSeparator: \"=\"\n\t\t\tngPasteFromPasteOnly: \"=\"\n\t\t\tngPasteFromBeforeParse: \"=\"\n\t\t\tngPasteFromAfterParseRow: \"=\"\n\t\t\tngPasteFromOnValidate: \"=\"\n\t\t\tngPasteFromBeforeApply: \"=\"\n\t\t\tngPasteFromOnError: \"=\"\n\n\t\tlink: ($scope, element, attrs) ->\n\t\t\tif not $scope.ngPasteFromColumns?\n\t\t\t\tconsole.error \"Missing required attribute ngPasteFromColumns.\"\n\n\t\t\t$scope.pasteEvent = (event) ->\n\t\t\t\tif event.clipboardData? && event.clipboardData.getData? # Standard\n\t\t\t\t\tdata = event.clipboardData.getData \"text/plain\"\n\t\t\t\telse if event.originalEvent? && event.originalEvent.clipboardData? && event.originalEvent.clipboardData.getData? # jQuery\n\t\t\t\t\tdata = event.originalEvent.clipboardData.getData \"text/plain\"\n\t\t\t\telse if window.clipboardData? && window.clipboardData.getData? # Internet Explorer\n\t\t\t\t\tdata = window.clipboardData.getData \"Text\"\n\n\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t$scope.processPasteData data\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\tevent.preventDefault()\n\n\t\t\t$scope.changeEvent = ->\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\telement.val \"\"\n\t\t\t\telse\n\t\t\t\t\tdata = element.val()\n\t\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t\t$scope.processPasteData data\n\n\t\t\telement.on \"paste\", $scope.pasteEvent\n\t\t\telement.on \"keyup\", $scope.changeEvent\n\t\t\telement.on \"change\", $scope.changeEvent\n\n\t\tcontroller: ($scope, $filter, ngPasteFromErrors, ngPasteFromSeparators) ->\n\t\t\t$scope.columnsToObject = (columns) ->\n\t\t\t\tobj = {}\n\t\t\t\tformat = $scope.ngPasteFromColumns\n\t\t\t\tfor column, index in columns\n\t\t\t\t\tobj[format[index]] = column\n\t\t\t\tobj\n\n\t\t\t$scope.getExpectedColumnsLength = ->\n\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t$scope.ngPasteFromColumns\n\t\t\t\telse\n\t\t\t\t\t$scope.ngPasteFromColumns.length\n\n\t\t\t$scope.processPasteData = (data) ->\n\t\t\t\tif not (data and data.length)\n\t\t\t\t\treturn\n\n\t\t\t\trows = data.split $scope.ngPasteFromRowSeparator ? ngPasteFromSeparators.row\n\t\t\t\tresult = []\n\t\t\t\texpectedColumnsLength = $scope.getExpectedColumnsLength()\n\n\t\t\t\tfor row, index in rows\n\t\t\t\t\tif row is \"\"\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tcolumns = row.split $scope.ngPasteFromColumnSeparator ? ngPasteFromSeparators.column\n\n\t\t\t\t\trowData =\n\t\t\t\t\t\tindex: index\n\t\t\t\t\t\tsource: row\n\t\t\t\t\t\texpectedLength: expectedColumnsLength\n\t\t\t\t\t\tactualLength: columns.length\n\n\t\t\t\t\tif columns.length isnt expectedColumnsLength\n\t\t\t\t\t\tif typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.invalidColumnLength, rowData\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t\trowResult = columns\n\t\t\t\t\telse\n\t\t\t\t\t\trowResult = $scope.columnsToObject columns\n\n\t\t\t\t\tif typeof $scope.ngPasteFromOnValidate isnt \"function\" or $scope.ngPasteFromOnValidate rowResult, rowData\n\t\t\t\t\t\tif typeof $scope.ngPasteFromAfterParseRow is \"function\"\n\t\t\t\t\t\t\trowResult = $scope.ngPasteFromAfterParseRow rowResult rowData\n\n\t\t\t\t\t\tresult.push rowResult\n\t\t\t\t\telse if typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.failedValidation, rowData\n\n\t\t\t\tif typeof $scope.ngPasteFromBeforeApply is \"function\"\n\t\t\t\t\t$scope.ngPasteFromBeforeApply result\n\n\t\t\t\t$scope.$apply ->\n\t\t\t\t\t$scope.ngPasteFrom = result\n",null],"sourceRoot":"/source/"}