{"version":3,"sources":["ng-paste-from.coffee"],"names":[],"mappings":"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","file":"ng-paste-from-latest.js","sourceRoot":"/source/","sourcesContent":["angular.module \"ngPasteFrom\", []\n\t.constant \"ngPasteFromErrors\",\n\t\tinvalidColumnLength: \"NGPASTEFROM_INVALID_COLUMN_LENGTH\"\n\t\tfailedValidation: \"NGPASTEFROM_FAILED_VALIDATION\"\n\n\t.constant \"ngPasteFromSeparators\",\n\t\trow: /\\r\\n|\\n\\r|\\n|\\r/g\n\t\tcolumn: \"\\t\"\n\n\t.directive \"ngPasteFrom\", ->\n\t\trestrict: \"A\"\n\t\tscope: \n\t\t\tngPasteFrom: \"=\"\n\t\t\tngPasteFromColumns: \"=\"\n\t\t\tngPasteFromRowSeparator: \"=\"\n\t\t\tngPasteFromColumnSeparator: \"=\"\n\t\t\tngPasteFromPasteOnly: \"=\"\n\t\t\tngPasteFromBeforeParse: \"=\"\n\t\t\tngPasteFromOnValidate: \"=\"\n\t\t\tngPasteFromOnError: \"=\"\n\n\t\tlink: ($scope, element, attrs) ->\n\t\t\tif not $scope.ngPasteFromColumns?\n\t\t\t\tconsole.error \"Missing required attribute ngPasteFromColumns.\"\n\n\t\t\t$scope.pasteEvent = (event) ->\n\t\t\t\tif event.clipboardData? && event.clipboardData.getData? # Standard\n\t\t\t\t\tdata = event.clipboardData.getData \"text/plain\"\n\t\t\t\telse if window.clipboardData? && window.clipboardData.getData? # Internet Explorer\n\t\t\t\t\tdata = window.clipboardData.getData \"Text\"\n\n\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t$scope.processPasteData data\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\tevent.preventDefault()\n\n\t\t\t$scope.changeEvent = ->\n\t\t\t\tif $scope.ngPasteFromPasteOnly ? true\n\t\t\t\t\telement.val \"\"\n\t\t\t\telse\n\t\t\t\t\tdata = element.val()\n\t\t\t\t\tif typeof $scope.ngPasteFromBeforeParse is \"function\"\n\t\t\t\t\t\tdata = $scope.ngPasteFromBeforeParse data\n\t\t\t\t\t$scope.processPasteData data\n\n\t\t\telement.on \"paste\", $scope.pasteEvent\n\t\t\telement.on \"keyup\", $scope.changeEvent\n\t\t\telement.on \"change\", $scope.changeEvent\n\n\t\tcontroller: ($scope, $filter, ngPasteFromErrors, ngPasteFromSeparators) ->\n\t\t\t$scope.columnsToObject = (columns) ->\n\t\t\t\tobj = {}\n\t\t\t\tformat = $scope.ngPasteFromColumns\n\t\t\t\tfor column, index in columns\n\t\t\t\t\tobj[format[index]] = column\n\t\t\t\tobj\n\n\t\t\t$scope.getExpectedColumnsLength = ->\n\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t$scope.ngPasteFromColumns\n\t\t\t\telse\n\t\t\t\t\t$scope.ngPasteFromColumns.length\n\n\t\t\t$scope.processPasteData = (data) ->\n\t\t\t\tif not (data and data.length)\n\t\t\t\t\treturn\n\n\t\t\t\trows = data.split $scope.ngPasteFromRowSeparator ? ngPasteFromSeparators.row\n\t\t\t\tresult = []\n\t\t\t\texpectedColumnsLength = $scope.getExpectedColumnsLength()\n\n\t\t\t\tfor row, index in rows\n\t\t\t\t\tif row is \"\"\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tcolumns = row.split $scope.ngPasteFromColumnSeparator ? ngPasteFromSeparators.column\n\n\t\t\t\t\trowData =\n\t\t\t\t\t\tindex: index\n\t\t\t\t\t\tsource: row\n\t\t\t\t\t\texpectedLength: expectedColumnsLength\n\t\t\t\t\t\tactualLength: columns.length\n\n\t\t\t\t\tif columns.length isnt expectedColumnsLength\n\t\t\t\t\t\tif typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.invalidColumnLength, rowData\n\t\t\t\t\t\tcontinue\n\n\t\t\t\t\tif typeof $scope.ngPasteFromColumns is \"number\"\n\t\t\t\t\t\trowResult = columns\n\t\t\t\t\telse\n\t\t\t\t\t\trowResult = $scope.columnsToObject columns\n\n\t\t\t\t\tif typeof $scope.ngPasteFromOnValidate isnt \"function\" or $scope.ngPasteFromOnValidate rowResult, rowData\n\t\t\t\t\t\tresult.push rowResult\n\t\t\t\t\telse if typeof $scope.ngPasteFromOnError is \"function\"\n\t\t\t\t\t\t$scope.ngPasteFromOnError ngPasteFromErrors.failedValidation, rowData\n\n\t\t\t\t$scope.$apply ->\n\t\t\t\t\t$scope.ngPasteFrom = result\n"]}