(function(){angular.module("ngPasteFrom",[]).constant("ngPasteFromErrors",{invalidColumnLength:"NGPASTEFROM_INVALID_COLUMN_LENGTH",failedValidation:"NGPASTEFROM_FAILED_VALIDATION"}).constant("ngPasteFromSeparators",{row:/\r\n|\n\r|\n|\r/g,column:"	"}).directive("ngPasteFrom",function(){return{restrict:"A",scope:{ngPasteFrom:"=",ngPasteFromColumns:"=",ngPasteFromRowSeparator:"=",ngPasteFromColumnSeparator:"=",ngPasteFromPasteOnly:"=",ngPasteFromBeforeParse:"=",ngPasteFromAfterParseRow:"=",ngPasteFromOnValidate:"=",ngPasteFromOnSuccessBeforeApply:"=",ngPasteFromOnError:"="},link:function($scope,element){return null==$scope.ngPasteFromColumns&&console.error("Missing required attribute ngPasteFromColumns."),$scope.pasteEvent=function(event){var data,ref;return null!=event.clipboardData&&null!=event.clipboardData.getData?data=event.clipboardData.getData("text/plain"):null!=event.originalEvent&&null!=event.originalEvent.clipboardData&&null!=event.originalEvent.clipboardData.getData?data=event.originalEvent.clipboardData.getData("text/plain"):null!=window.clipboardData&&null!=window.clipboardData.getData&&(data=window.clipboardData.getData("Text")),"function"==typeof $scope.ngPasteFromBeforeParse&&(data=$scope.ngPasteFromBeforeParse(data)),$scope.processPasteData(data),(null!=(ref=$scope.ngPasteFromPasteOnly)?ref:!0)?event.preventDefault():void 0},$scope.changeEvent=function(){var data,ref;return(null!=(ref=$scope.ngPasteFromPasteOnly)?ref:!0)?element.val(""):(data=element.val(),"function"==typeof $scope.ngPasteFromBeforeParse&&(data=$scope.ngPasteFromBeforeParse(data)),$scope.processPasteData(data))},element.on("paste",$scope.pasteEvent),element.on("keyup",$scope.changeEvent),element.on("change",$scope.changeEvent)},controller:function($scope,$filter,ngPasteFromErrors,ngPasteFromSeparators){return $scope.columnsToObject=function(columns){var column,format,i,index,len,obj;for(obj={},format=$scope.ngPasteFromColumns,index=i=0,len=columns.length;len>i;index=++i)column=columns[index],obj[format[index]]=column;return obj},$scope.getExpectedColumnsLength=function(){return"number"==typeof $scope.ngPasteFromColumns?$scope.ngPasteFromColumns:$scope.ngPasteFromColumns.length},$scope.processPasteData=function(data){var columns,expectedColumnsLength,i,index,len,ref,ref1,result,row,rowData,rowResult,rows;if(data&&data.length){for(rows=data.split(null!=(ref=$scope.ngPasteFromRowSeparator)?ref:ngPasteFromSeparators.row),result=[],expectedColumnsLength=$scope.getExpectedColumnsLength(),index=i=0,len=rows.length;len>i;index=++i)row=rows[index],""!==row&&(columns=row.split(null!=(ref1=$scope.ngPasteFromColumnSeparator)?ref1:ngPasteFromSeparators.column),rowData={index:index,source:row,expectedLength:expectedColumnsLength,actualLength:columns.length},columns.length===expectedColumnsLength?(rowResult="number"==typeof $scope.ngPasteFromColumns?columns:$scope.columnsToObject(columns),"function"!=typeof $scope.ngPasteFromOnValidate||$scope.ngPasteFromOnValidate(rowResult,rowData)?("function"==typeof $scope.ngPasteFromAfterParseRow&&(rowResult=$scope.ngPasteFromAfterParseRow(rowResult)),result.push(rowResult)):"function"==typeof $scope.ngPasteFromOnError&&$scope.ngPasteFromOnError(ngPasteFromErrors.failedValidation,rowData)):"function"==typeof $scope.ngPasteFromOnError&&$scope.ngPasteFromOnError(ngPasteFromErrors.invalidColumnLength,rowData));return"function"==typeof $scope.ngPasteFromOnSuccessBeforeApply&&$scope.ngPasteFromOnSuccessBeforeApply(result),$scope.$apply(function(){return $scope.ngPasteFrom=result})}}}}})}).call(this);
//# sourceMappingURL=ng-paste-from-latest.min.js.map